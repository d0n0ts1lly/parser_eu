import os
import csv
import time
import random
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import concurrent.futures
import threading
import glob
import shutil

# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è
# =======================
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –Ω–∞ GitHub Actions
is_github_actions = os.getenv('GITHUB_ACTIONS') is not None

if is_github_actions:
    try:
        from pyvirtualdisplay import Display
        display = Display(visible=0, size=(1920, 1080))
        display.start()
        print("üñ•Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ GitHub Actions")
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π: {e}")
else:
    print("üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫
download_dir = os.path.join(os.getcwd(), "downloads")
os.makedirs(download_dir, exist_ok=True)

print(f"Current working directory: {os.getcwd()}")
print(f"Download folder: {download_dir}")
print(f"Exists? {os.path.exists(download_dir)}")
print(f"Files in download directory: {os.listdir(download_dir)}")

# –î–∞–Ω–Ω—ã–µ –∏–∑ GitHub Secrets
COPART_USER = os.environ["COPART_USER"]
COPART_PASS = os.environ["COPART_PASS"]
FLASK_CLEAR_URL = os.environ["FLASK_CLEAR_URL"]
FLASK_UPLOAD_URL = os.environ["FLASK_UPLOAD_URL"]

# =======================
# Selenium –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–ï–ó headless
# =======================
chrome_path = "/usr/bin/chromium-browser"
driver_path = "/usr/bin/chromedriver"

options = webdriver.ChromeOptions()
options.binary_location = chrome_path

# –£–ë–ò–†–ê–ï–ú headless –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –¥–∏—Å–ø–ª–µ–µ–º
# options.add_argument("--headless=new")  # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û

options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-gpu")
options.add_argument("--window-size=1920,1080")
options.add_argument("--disable-features=VizDisplayCompositor")
options.add_argument("--disable-software-rasterizer")

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
prefs = {
    "download.default_directory": download_dir,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    "profile.default_content_settings.popups": 0,
    "profile.content_settings.exceptions.automatic_downloads.*.setting": 1
}
options.add_experimental_option("prefs", prefs)

driver = webdriver.Chrome(service=Service(driver_path), options=options)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ CDP
driver.execute_cdp_cmd(
    "Page.setDownloadBehavior",
    {"behavior": "allow", "downloadPath": download_dir}
)

wait = WebDriverWait(driver, 30)

def move_and_rename_file(original_filename, new_filename):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    original_path = os.path.join(download_dir, original_filename)
    new_path = os.path.join(download_dir, new_filename)
    
    if os.path.exists(original_path):
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Ñ–∞–π–ª –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è
        time.sleep(2)
        shutil.move(original_path, new_path)
        print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {original_filename} -> {new_filename}")
        return True
    return False

# =======================
# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
# =======================
def wait_for_download_complete(timeout=60):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    import time
    
    start_time = time.time()
    last_temp_files = []
    
    while time.time() - start_time < timeout:
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∑–∫–∏ (.crdownload –∏–ª–∏ .tmp)
        temp_files = glob.glob(os.path.join(download_dir, "*.crdownload"))
        temp_files.extend(glob.glob(os.path.join(download_dir, "*.tmp")))
        
        if temp_files:
            if temp_files != last_temp_files:
                print(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: {[os.path.basename(f) for f in temp_files]}")
                last_temp_files = temp_files
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–æ–≤
            csv_files = glob.glob(os.path.join(download_dir, "*.csv"))
            if csv_files:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª—ã: {[os.path.basename(f) for f in csv_files]}")
                return True
                
        time.sleep(2)
    
    print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏")
    return False

# =======================
# –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
# =======================
def dwn(file_number):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ —Å –Ω–æ–º–µ—Ä–æ–º"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    files_before = set(os.listdir(download_dir))
    print(f"üìÅ –§–∞–π–ª–æ–≤ –¥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(files_before)}")
    
    time.sleep(3)
    
    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    down_but = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".cprt-btn-white.export-csv-button")))
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", down_but)
    driver.execute_script("arguments[0].click();", down_but)
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–∂–∞—Ç–∞")
    
    time.sleep(5)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ OK
    ok_buttons = driver.find_elements(By.CSS_SELECTOR, ".cprt-btn-yellow")
    clicked = False
    for ok_button in ok_buttons:
        try:
            WebDriverWait(driver, 5).until(EC.element_to_be_clickable(ok_button))
            ok_button.click()
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ OK –Ω–∞–∂–∞—Ç–∞")
            clicked = True
            time.sleep(3)
            break
        except Exception as e:
            print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É OK: {e}")
            continue
    
    if not clicked:
        print("‚Ñπ –ö–Ω–æ–ø–∫–∞ OK –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    download_success = wait_for_download_complete(timeout=45)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
    files_after = set(os.listdir(download_dir))
    new_files = files_after - files_before
    
    if new_files:
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª
        new_csv_files = [f for f in new_files if f.endswith('.csv')]
        if new_csv_files:
            original_filename = new_csv_files[0]
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–º–µ—Ä–æ–º
            new_filename = f"copart_{file_number}.csv"
            
            original_path = os.path.join(download_dir, original_filename)
            new_path = os.path.join(download_dir, new_filename)
            
            if os.path.exists(original_path):
                os.rename(original_path, new_path)
                print(f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_filename}")
                return True
    else:
        print("‚ùå –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    return False
    
# =======================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê)
# =======================
def login_to_copart():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ Copart"""
    try:
        print("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ Copart...")
        
        email_input = wait.until(EC.presence_of_element_located((By.ID, "username")))
        email_input.clear()
        email_input.send_keys("")
        print("‚úÖ –õ–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω")
        time.sleep(2)

        password_input = wait.until(EC.presence_of_element_located((By.ID, "password")))
        password_input.clear()
        password_input.send_keys(COPART_PASS)
        print("‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω")
        time.sleep(2)

        login_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button.cprt-btn-yellow")))
        login_button.click()
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞")
        time.sleep(5)
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        return False

# =======================
# –°–∫–∞—á–∏–≤–∞–µ–º CSV —Å —Å–∞–π—Ç–∞ Copart
# =======================
start_time = time.perf_counter()
try:
#Germany
    driver.get("https://www.copart.de/lotSearchResults?query=&searchCriteria=%7B%22query%22:%5B%22*%22%5D,%22filter%22:%7B%7D,%22searchName%22:%22%22,%22watchListOnly%22:false,%22freeFormSearch%22:false%7D")
    time.sleep(5)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        cookie_accept = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
        )
        cookie_accept.click()
        print("‚úÖ Cookie –±–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    except:
        print("‚Ñπ Cookie –±–∞–Ω–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal_close = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#UnAuthorizedAccessModal .close, [data-dismiss='modal']"))
        )
        modal_close.click()
        print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        time.sleep(2)
    except Exception as e:
        print(f"‚Ñπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    
    export_button = wait.until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.export-csv-button"))
    )
    export_button.click()

    time.sleep(5)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
    if login_to_copart():
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")

    # –£–ë–ò–†–ê–ï–ú –ª–∏—à–Ω–∏–π –∫–ª–∏–∫ - —Ñ–∞–π–ª –£–ñ–ï –¥–æ–ª–∂–µ–Ω —Å–∫–∞—á–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
    down_but = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".cprt-btn-white.export-csv-button")))
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", down_but)
    driver.execute_script("arguments[0].click();", down_but)
    time.sleep(5)

    # –ñ–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    if wait_for_download_complete(timeout=45):
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        csv_files = glob.glob(os.path.join(download_dir, "*.csv"))
        if csv_files:
            original_filename = os.path.basename(csv_files[0])
            new_filename = f"germany.csv"
            original_path = os.path.join(download_dir, original_filename)
            new_path = os.path.join(download_dir, new_filename)
            if os.path.exists(original_path):
                os.rename(original_path, new_path)
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_filename}")


    time.sleep(5)


#Spain
    driver.get("https://www.copart.es/en/lotSearchResults?query=")
    time.sleep(5)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        cookie_accept = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
        )
        cookie_accept.click()
        print("‚úÖ Cookie –±–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    except:
        print("‚Ñπ Cookie –±–∞–Ω–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal_close = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#UnAuthorizedAccessModal .close, [data-dismiss='modal']"))
        )
        modal_close.click()
        print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        time.sleep(2)
    except Exception as e:
        print(f"‚Ñπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    
    export_button = wait.until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.export-csv-button"))
    )
    export_button.click()

    time.sleep(5)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
    if login_to_copart():
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")

    # –£–ë–ò–†–ê–ï–ú –ª–∏—à–Ω–∏–π –∫–ª–∏–∫ - —Ñ–∞–π–ª –£–ñ–ï –¥–æ–ª–∂–µ–Ω —Å–∫–∞—á–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
    down_but = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".cprt-btn-white.export-csv-button")))
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", down_but)
    driver.execute_script("arguments[0].click();", down_but)
    time.sleep(5)

    # –ñ–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    if wait_for_download_complete(timeout=45):
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        csv_files = glob.glob(os.path.join(download_dir, "*.csv"))
        if csv_files:
            original_filename = os.path.basename(csv_files[0])
            new_filename = f"spain.csv"
            original_path = os.path.join(download_dir, original_filename)
            new_path = os.path.join(download_dir, new_filename)
            if os.path.exists(original_path):
                os.rename(original_path, new_path)
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_filename}")


    time.sleep(5)

#Finland
    driver.get("https://www.copart.fi/lotSearchResults?query=")
    time.sleep(5)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        cookie_accept = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
        )
        cookie_accept.click()
        print("‚úÖ Cookie –±–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç")
    except:
        print("‚Ñπ Cookie –±–∞–Ω–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal_close = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#UnAuthorizedAccessModal .close, [data-dismiss='modal']"))
        )
        modal_close.click()
        print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        time.sleep(2)
    except Exception as e:
        print(f"‚Ñπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
        
    export_button = wait.until(
    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.export-csv-button"))
    )
    export_button.click()

    time.sleep(5)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞
    if login_to_copart():
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")

    # –£–ë–ò–†–ê–ï–ú –ª–∏—à–Ω–∏–π –∫–ª–∏–∫ - —Ñ–∞–π–ª –£–ñ–ï –¥–æ–ª–∂–µ–Ω —Å–∫–∞—á–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
    down_but = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".cprt-btn-white.export-csv-button")))
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", down_but)
    driver.execute_script("arguments[0].click();", down_but)
    time.sleep(5)

    # –ñ–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    if wait_for_download_complete(timeout=45):
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        csv_files = glob.glob(os.path.join(download_dir, "*.csv"))
        if csv_files:
            original_filename = os.path.basename(csv_files[0])
            new_filename = f"finland.csv"
            original_path = os.path.join(download_dir, original_filename)
            new_path = os.path.join(download_dir, new_filename)
            if os.path.exists(original_path):
                os.rename(original_path, new_path)
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_filename}")


    time.sleep(5)

    

except Exception as e:
    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
finally:
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
    driver.quit()
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    if is_github_actions and 'display' in locals():
        display.stop()
        print("üñ•Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
print(f"‚è± CSV —Å–∫–∞—á–∞–Ω—ã –∑–∞ {time.perf_counter() - start_time:.2f} —Å–µ–∫—É–Ω–¥")


# =======================
# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–æ–∫
# =======================
MAKE_MAP = {
    "AUDI": "AUDI",
    "BMW": "BMW",
    "CHEV": "CHEVROLET",
    "DODG": "DODGE",
    "FORD": "FORD",
    "HOND": "HONDA",
    "HYUN": "HYUNDAI",
    "INFI": "INFINITI",
    "JEP": "JEEP",
    "KIA": "KIA",
    "LAND": "LAND ROVER",
    "LEXS": "LEXUS",
    "MAZD": "MAZDA",
    "MERZ": "MERCEDES-BENZ",
    "MCRE": "MERCEDES-BENZ",
    "MITS": "MITSUBISHI",
    "NISS": "NISSAN",
    "PORS": "PORSHE",
    "RAM": "RAM",
    "SUBA": "SUBARU",
    "TESL": "TESLA",
    "TOYT": "TOYOTA",
    "VOLK": "VOLKSWAGEN",
    "VOLV": "VOLVO",
    "ACUR": "ACURA",
    "ALFA": "ALFA ROMEO",
    "CHRY": "CHRYSLER",
    "BUIC": "BUICK",
    "BENT": "BENTLEY",
    "CADI": "CADILLAC",
    "GENS": "GENESIS",
    "FIAT": "FIAT",
    "DUCA": "DUCATI",
    "GMC": "GMC",
    "LINC": "LINCOLN",
    "LUCI": "LUCID",
    "MIN": "MINI",
    "MASE": "MASERATI",
    "JAGU": "JAGUAR",
    "PLSR": "POLESTAR",
    "SUZI": "SUZUKI",
    "ISU": "ISUZU"
}

def normalize_make(make):
    make = make.strip().upper()
    return MAKE_MAP.get(make, make)

# =======================
# –ß–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Flask API
# =======================
flask_clear_url = 'http://www.bwauto.com.ua/clear_table_eu'
flask_upload_url = 'http://www.bwauto.com.ua/upload_data_eu'

start_clear = time.perf_counter()
response = requests.post(flask_clear_url)
if response.ok:
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ cars –æ—á–∏—â–µ–Ω–∞ –∑–∞ {time.perf_counter() - start_clear:.2f} —Å–µ–∫—É–Ω–¥")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {response.text}")

# =======================
# –ß–∏—Ç–∞–µ–º CSV –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# =======================
all_data = []
start_csv = time.perf_counter()

for file_name in os.listdir(download_dir):
    if not file_name.endswith(".csv"):
        continue

    file_path = os.path.join(download_dir, file_name)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")

    if "germany" in file_name.lower() in file_name.lower():
        country = "Germany"
    elif "spain" in file_name.lower() in file_name.lower():
        country = "Spain"
    elif "finland" in file_name.lower() in file_name.lower():
        country = "Finland"
    else:
        country = "Unknown"  # –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    with open(file_path, mode='r', encoding='utf-8') as f:
        reader = csv.reader(f)
        headers = next(reader)
        for row in reader:
            if not row or len(row) != 21:
                continue
            row[5] = normalize_make(row[5])
            sort_order_value = random.randint(1, 1_000_000)
            all_data.append({
                "lot_url": row[0],
                "lot_number": row[1],
                "retail_value": row[2],
                "sale_date": row[3],
                "year": int(row[4]) if row[4].isdigit() else None,
                "make": row[5],
                "model": row[6],
                "engine": row[7],
                "cylinders": row[8],
                "vin": row[9],
                "setka": row[10],
                "title": row[11],
                "category": row[12],
                "odometer": row[13],
                "odometer_desc": row[14],
                "damage": row[15],
                "current_bid": row[16],
                "my_bid": row[17],
                "item_number": row[18],
                "sale_name": row[19],
                "remont": row[20],
                "country": country,
                "sort_order": sort_order_value
            })
    os.remove(file_path)
    print(f"–§–∞–π–ª {file_name} —É–¥–∞–ª–µ–Ω")

print(f"‚è± CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {time.perf_counter() - start_csv:.2f} —Å–µ–∫—É–Ω–¥")
print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}")

import concurrent.futures
import threading

batch_size = 200
batches = [all_data[i:i+batch_size] for i in range(0, len(all_data), batch_size)]
total_batches = len(batches)

batch_list = list(enumerate(batches, start=1))  # [(1, batch1), (2, batch2), ...]

inserted_total, failed_total = 0, 0
lock = threading.Lock()

def send_batch(batch_num, batch):
    global inserted_total, failed_total
    try:
        print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ {batch_num}/{total_batches}...")
        response = requests.post(flask_upload_url, json=batch)
        if response.ok:
            inserted = len(batch)
            failed = 0
            print(f"‚úÖ –ü–∞–∫–µ—Ç {batch_num}/{total_batches} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω ({inserted} –∑–∞–ø–∏—Å–µ–π)")
        else:
            inserted = 0
            failed = len(batch)
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ {batch_num}: {response.text}")
    except Exception as e:
        inserted = 0
        failed = len(batch)
        print(f"‚ùå Exception –≤ –ø–∞–∫–µ—Ç–µ {batch_num}: {e}")

    with lock:
        inserted_total += inserted
        failed_total += failed
        print(f"‚Ñπ –ü—Ä–æ–≥—Ä–µ—Å—Å: {inserted_total} –≤—Å—Ç–∞–≤–ª–µ–Ω–æ, {failed_total} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")

    return inserted, failed

# ============================
# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
# ============================
start_upload = time.perf_counter()

with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
    results = executor.map(lambda args: send_batch(*args), batch_list)

for inserted, failed in results:
    pass  # —Å—á—ë—Ç—á–∏–∫–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ send_batch

print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞ {time.perf_counter() - start_upload:.2f} —Å–µ–∫—É–Ω–¥")
print(f"–í—Å–µ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: {inserted_total}, –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {failed_total}")
